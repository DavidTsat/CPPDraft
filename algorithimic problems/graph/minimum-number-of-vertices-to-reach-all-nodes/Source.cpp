#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

class Solution {
    vector<int> v;
    vector<vector<int>> g;

    void f(int n, vector<vector<int>>& edges, int ii)
    {
        for (int i = ii; i < edges.size() - 1; ++i)
        {
            for (int j = i + 1; j < edges.size(); ++j)
            {
                if (edges[i][0] == edges[j][0])
                {
                    edges[i].push_back(edges[j][1]);
                    f(n, edges, j + 1);
                }
            }
            if (i > 0 && edges[i][0] == edges[i - 1][0])
            {
                edges.erase(edges.begin() + i);
                continue;
            }
        }
    }

    void dfs(const int i, int j, vector<vector<int>>& e)
    {
        // if (e[j][0] != i)
        //     return;

        e[j][0] = -1;
        while (++j < e.size() && e[j][0] == i)
        {
            dfs(e[j][1], j, e);
        }
    }

    void create_g_matrix(int n, vector<vector<int>>& e)
    {
        g = vector<vector<int>>(n, vector<int>(n, 0));

        for (const vector<int>& vg : e)
        {
            g[vg[0]][vg[1]] = 1;
        }
    }
    void find_e_edges()
    {
        for (int i = 0; i < g.size(); ++i)
        {
            bool b = true;
            for (int j = 0; j < g.size(); ++j)
            {
                if (g[j][i] == 1)
                {
                    b = false;
                    break;
                }
            }
            if (b)
                v.push_back(i);
        }
    }
    void dfs(int i, vector<int>& visited)
    {
        visited[i] = 1;
        //cout << i << ' ';
        for (int j = 0; j < g.size(); ++j)
        {
            if (g[i][j] == 1 && visited[j] == 0)
                dfs(j, visited);
        }
    }
public:
    vector<int> findSmallestSetOfVertices(int n, vector<vector<int>>& e)
    {
        vector<int> vv(n, 0);

        for (int i = 0; i < e.size(); ++i)
        {
            vv[e[i][1]] = 1;
        }
        for (int i = 0; i < vv.size(); ++i)
        {
            if (vv[i] == 0)
                v.push_back(i);
        }
        /*
        sort(e.begin(), e.end(), [](const vector<int>& v1, const vector<int>& v2) {return v1[1] < v2[1]; });
        for (int i = 0; i < n; ++i)
        {
            bool b = true;
            for (int j = 0; j < e.size(); ++j)
            {
                if (e[j][1] > i) break;
                if (e[j][1] == i)
                {
                    b = false;
                    break;
                }
            }
            if (b) v.push_back(i);
        }
        */



        //   create_g_matrix(n, e);
       //    find_e_edges();

           /*
           vector<int> visited(g.size(), 0);
           for (int i : v)
           {
               dfs(i, visited);
             //  cout << endl;
           }
           for (int i = 0; i < visited.size(); ++i)
           {
               if (visited[i] == 0)
               {
                   v.push_back(i);
                   break;
               }
           }
           */
        return v;
    }

    /*
    vector<int> findSmallestSetOfVertices(int n, vector<vector<int>>& e)
    {
        for (int i = 0; i < n; ++i)
        {
            bool b = true;
            for (int j = 0; j < e.size(); ++j)
            {
                if (e[j][1] == i)
                {
                    b = false;
                    break;
                }
            }
            if (b) v.push_back(i);
        }


        for (int i : v)
        {
            int j = 0;
            for (; j < e.size(); ++j)
            {
                if (e[j][0] == i)
                    break;
            }
            dfs(i, j, e);
        }

        return v;
    }
    */
    /*
    vector<int> findSmallestSetOfVertices(int n, vector<vector<int>>& edges) {

        sort(edges.begin(), edges.end(), [](const vector<int>& v1, const vector<int>& v2) {return v1 <= v2; });
        vector<int> visited;

        int c = n;
        for (int i = 0; i < n; ++i)
        {
            bool b = false;
            vector<int> vv;
            for (int j = 0; j < edges.size(); ++j)
            {
                if (edges[j][1] == i)
                {
                    b = true;
                    break;
                }
                if (edges[j][0] == i)
                    vv.push_back(edges[j][1]);
            }
            if (!b)
            {
                v.push_back(i);
                for (int cv : vv)
                {
                    visited.push_back(cv);
                }
            }
            else
            {
                if (find(visited.cbegin(), visited.cend(), i) == visited.cend())
                    v.push_back(i);
                //     cout << "i: " << i << endl;
            }
        }

        return v;
    }
    */
};

int main()
{
    Solution s;
    vector<vector<int>> g1 = { {0,1},{0,2},{2,5},{3,4},{4,2} };
    vector<vector<int>> g2 = { {0,1},{0,2},{2,5},{3,4},{4,2}, {6,7}, {7,8}, {8,6} };
    vector<vector<int>> g3 = { {7, 3}, {20, 25}, {30, 41}, {28, 41}, {31, 44}, {22, 19}, {42, 20}, {9, 0}, {14, 31}, {45, 35}, {15, 30}, {39, 45}, {37, 13}, {14, 1}, {27, 1}, {31, 15}, {29, 11}, {16, 0}, {30, 16}, {4, 35}, {17, 13}, {32, 35}, {5, 34}, {46, 23}, {18, 10}, {36, 41}, {8, 12}, {22, 12}, {37, 44}, {11, 41}, {44, 25}, {18, 36}, {23, 9}, {37, 16}, {2, 18}, {26, 23}, {39, 30}, {2, 12}, {1, 33}, {40, 4}, {30, 27}, {17, 6}, {41, 1}, {22, 45}, {42, 6}, {40, 42}, {6, 32}, {34, 32}, {43, 23}, {32, 16}, {22, 7}, {11, 46}, {18, 31}, {42, 32}, {23, 6}, {43, 45}, {13, 44}, {9, 20}, {12, 7}, {36, 4}, {13, 6}, {37, 25}, {1, 0}, {2, 7}, {5, 10}, {6, 1}, {5, 20}, {23, 33}, {6, 27}, {21, 17}, {19, 1}, {28, 44}, {31, 33}, {42, 43}, {12, 32}, {8, 0}, {11, 19}, {24, 9}, {12, 20}, {27, 20}, {39, 12}, {28, 23}, {28, 13}, {19, 32}, {31, 0}, {47, 45}, {40, 24}, {19, 6}, {5, 39}, {29, 42}, {44, 6}, {20, 1}, {16, 33}, {23, 20}, {36, 44}, {34, 44}, {17, 44}, {14, 29}, {45, 33}, {34, 6}, {37, 11}, {24, 16}, {2, 25}, {15, 44}, {4, 7}, {28, 4}, {31, 9}, {4, 45}, {8, 40}, {22, 40}, {31, 23}, {36, 43}, {45, 0}, {32, 27}, {44, 27}, {38, 33}, {34, 1}, {39, 36}, {11, 1}, {24, 23}, {36, 31}, {37, 30}, {2, 16}, {29, 2}, {4, 20}, {7, 9}, {5, 41}, {18, 3}, {21, 22}, {17, 30}, {11, 32}, {23, 0}, {34, 24}, {24, 30}, {14, 17}, {15, 20}, {12, 31}, {25, 1}, {26, 6}, {29, 27}, {40, 13}, {30, 0}, {7, 6}, {27, 45}, {23, 35}, {6, 25}, {21, 31}, {40, 19}, {19, 3}, {17, 23}, {32, 41}, {22, 28}, {31, 35}, {44, 9}, {23, 25}, {47, 12}, {34, 19}, {37, 38}, {18, 46}, {36, 13}, {10, 24}, {14, 2}, {38, 15}, {13, 23}, {2, 28}, {3, 1}, {6, 16}, {21, 24}, {30, 45}, {41, 27}, {22, 23}, {44, 0}, {18, 15}, {16, 35}, {47, 21}, {21, 2}, {40, 32}, {36, 46}, {34, 42}, {22, 9}, {34, 4}, {39, 41}, {11, 10}, {14, 5}, {38, 6}, {37, 19}, {19, 43}, {28, 6}, {0, 33}, {29, 7}, {40, 1}, {2, 43}, {17, 1}, {42, 27}, {47, 18}, {21, 11}, {6, 45}, {34, 37}, {22, 0}, {18, 32}, {24, 25}, {36, 25}, {15, 9}, {13, 9}, {37, 28}, {11, 25}, {26, 39}, {31, 30}, {18, 1}, {40, 46}, {30, 33}, {47, 27}, {10, 43}, {21, 20}, {7, 33}, {32, 20}, {46, 4}, {43, 33}, {10, 31}, {24, 6}, {28, 20}, {2, 3}, {24, 44}, {27, 9}, {30, 6}, {7, 0}, {3, 32}, {41, 16}, {31, 45}, {46, 15}, {23, 27}, {21, 7}, {32, 1}, {37, 36}, {44, 33}, {9, 1}, {14, 30}, {34, 11}, {24, 13}, {38, 13}, {12, 16}, {29, 18}, {15, 35}, {30, 9}, {28, 9}, {5, 25}, {46, 44}, {8, 37}, {7, 23}, {41, 25}, {31, 42}, {5, 35}, {18, 13}, {33, 35}, {21, 0}, {36, 40}, {8, 11}, {17, 32}, {41, 35}, {7, 45}, {10, 1}, {8, 17}, {11, 12}, {38, 4}, {39, 1}, {39, 31}, {19, 45}, {2, 15}, {0, 35}, {24, 32}, {6, 9}, {40, 3}, {4, 41}, {2, 41}, {8, 44}, {31, 19}, {46, 25}, {18, 4}, {23, 41}, {40, 41}, {21, 9}, {6, 35}, {34, 35}, {17, 25}, {22, 6}, {46, 3}, {44, 23}, {18, 30}, {42, 35}, {39, 32}, {44, 45}, {12, 6}, {13, 7}, {26, 17}, {24, 1}, {28, 31}, {2, 6}, {29, 30}, {6, 0}, {4, 16}, {19, 24}, {2, 32}, {26, 37}, {22, 39}, {31, 24}, {42, 0}, {41, 45}, {47, 3}, {43, 35}, {37, 3}, {11, 16}, {28, 12}, {46, 43}, {27, 33}, {40, 23}, {19, 7}, {32, 45}, {46, 13}, {20, 0}, {29, 43}, {18, 16}, {21, 5}, {8, 6}, {44, 35}, {10, 4}, {34, 9}, {15, 25}, {24, 15}, {38, 3}, {36, 23}, {15, 45}, {4, 6}, {29, 10}, {20, 33}, {16, 1}, {40, 30}, {21, 36}, {4, 44}, {28, 33}, {31, 20}, {47, 17}, {36, 42}, {45, 1}, {41, 33}, {11, 40}, {10, 15}, {34, 0}, {12, 9}, {2, 19}, {38, 28}, {4, 13}, {5, 0}, {3, 16}, {21, 45}, {8, 46}, {41, 0}, {6, 33}, {40, 43}, {46, 1}, {12, 42}, {13, 43}, {12, 0}, {26, 31}, {12, 30}, {28, 25}, {3, 25}, {40, 12}, {5, 19}, {28, 45}, {22, 31}, {11, 38}, {18, 23}, {12, 33}, {36, 38}, {34, 18}, {17, 42}, {14, 27}, {10, 27}, {37, 1}, {25, 45}, {26, 42}, {31, 3}, {5, 28}, {29, 15}, {27, 35}, {40, 25}, {47, 44}, {41, 20}, {31, 41}, {46, 19}, {22, 8}, {36, 11}, {38, 1}, {15, 1}, {39, 4}, {38, 27}, {20, 35}, {3, 45}, {40, 0}, {21, 34}, {30, 23}, {2, 42}, {22, 41}, {29, 34}, {18, 9}, {16, 25}, {21, 12}, {17, 36}, {44, 20}, {10, 13}, {9, 16}, {14, 15}, {2, 17}, {26, 18}, {39, 27}, {2, 11}, {25, 33}, {21, 43}, {2, 37}, {26, 38}, {9, 45}, {40, 45}, {47, 24}, {30, 32}, {10, 42}, {8, 28}, {32, 9}, {13, 41}, {44, 41}, {9, 25}, {15, 23}, {11, 31}, {12, 24}, {27, 16}, {25, 0}, {39, 16}, {24, 43}, {14, 34}, {29, 26}, {3, 27}, {30, 1}, {7, 1}, {5, 17}, {3, 33}, {21, 30}, {16, 45}, {36, 32}, {32, 0}, {10, 25}, {39, 9}, {3, 0}, {4, 27}, {31, 13}, {21, 39}, {4, 33}, {43, 6}, {32, 33}, {31, 43}, {44, 1}, {18, 12}, {9, 33}, {10, 38}, {17, 33}, {38, 45}, {10, 0}, {8, 16}, {11, 13}, {36, 19}, {15, 3}, {2, 20}, {14, 44}, {15, 41}, {28, 7}, {1, 35}, {31, 16}, {29, 32}, {47, 29}, {21, 10}, {10, 33}, {7, 43}, {22, 1}, {24, 0}, {4, 9}, {3, 20}, {40, 9}, {4, 23}, {2, 35}, {46, 35}, {10, 40}, {17, 19}, {22, 24}, {42, 45}, {34, 23}, {36, 1}, {10, 28}, {24, 7}, {13, 27}, {26, 5}, {24, 45}, {4, 30} };
    vector<int> v1 = s.findSmallestSetOfVertices(6, g1);  //48
    for (int i : v1)
    {
        cout << i << ' ';
    }
    cout << endl;
	return 0;
}